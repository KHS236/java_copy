package CH05;

public class C00INFO {

	public static void main(String[] args) {

		
//		상속(Ingeritance) : 물려주는 것
//		상위(부모,super)   : 클래스의 속성과 기능을 하위(자식,Sub)클래스에서
//						   그대로 받아 사용할 수 있도록 허용한 문법
		
//		상위 클래스로부터 속성/기능을 물려받은 하위클래스는 그 외의 속성/기능을 추가 할 수 있다
//		상위 클래스로부터 속성/기능을 물려받은 하위클래스는 물려받은 기능을 고쳐서 사용할 수 있다.
//		(오버라이딩)
//		extends 예약어 사용
		
		
		
//		상속을 사용하는 이유
//		1 확장성
//		현실세계에서 동물을 일부추출(추상화)해서 JAVA공간으로 가지고 온다고 했을 때
//		animal class를 만들어 꼬리/소리 등의 속성/기능을 만들고
//		dog class / cat class등 하위클래스에서 같은 속성과 기능을 물려받아서
//		사용할 수 있음
//		이후 tiger class를 만들 때 그대로 상속받으면 간편하게 바로 찍어낼 수 있음
		
//		2 유지보수
//		부모클래스에서 속성/기능을 수정하면 하위 클래스에서 그대로 받아들이기 때문에
//		유지보수에 용이하다
		
//		3 가독성
//		보이는 코드가 줄어들어 읽기가 편해진다
		
		
		
//		객체지향 기본파트
//		상속 기본
//		오버라이딩
//		Up/Downcasting -> 추상클래스 -> Interface
		
		
		
		/*
		 클래스 구조(속성/기능/생성자)
		 오버로딩(생성자,멤버함수)
		 정보은닉/this/static/배열
		 
		  2)상속
		  상속개념(상-하/속성기능 물려받는 개념)
		  오버라이딩
		  캐스팅(No Up / Down)
		  Upcasting: 상위클래스형 참조변수 = 하위객체
		  - 모든 상속관계의 생성된 객체를 단일 참조변수로 바인딩하기 위함
		  - 재정의된 메서드에 접근하기 위함
		  
		  Downcasting : 하위클래스형 참조변수 = 상위객체
		  - Upcasting 을 전제로 확장된 멤버에 접근하기 위함
		 */
		

		
		//Casting 형변환 정리
		/*
		 NoCasting 
		  - 형변환 없음
		  
		 UpCasting
		  - 상위클래스형 참조변수=하위클래스객체
		  - 자동 형변환
		  - 1)상속관계의 모든 하위객체를 연결할 수 있다.☆
		  - 2)업캐스팅된 상태에서의 참조변수는 하위객체의 재정의된 함수에 접근 가능하다
		 
		 DownCasting
		  - 
		  
		 */
		
		
		
		
		
		
		
		
		
	}

}
